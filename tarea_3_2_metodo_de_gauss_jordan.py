# -*- coding: utf-8 -*-
"""Tarea 3.2 Metodo de Gauss-Jordan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1be6irx-K1TSM8QcvJCSNtvrfIg3ALi9b
"""

#Antonio Josue Rodriguez Falcon
#Ejercicio 1

import numpy as np

def gauss_jordan_pivot_determinante(A, b):

    n = len(A)

    Ab = np.hstack([A, b.reshape(-1, 1)]).astype(float)


    det_A = np.linalg.det(A)


    if np.isclose(det_A, 0):
        mensaje = f"Determinante de A: {det_A:.5f}. El sistema es indeterminado o no tiene solución única."
        print(mensaje)
        return None

    mensaje = f"Determinante de A: {det_A:.5f}. El sistema tiene solución única."
    print(mensaje)


    for i in range(n):

        max_row = np.argmax(abs(Ab[i:, i])) + i
        if i != max_row:
            Ab[[i, max_row]] = Ab[[max_row, i]]


        Ab[i] = Ab[i] / Ab[i, i]


        for j in range(n):
            if i != j:
                Ab[j] -= Ab[j, i] * Ab[i]


    x = Ab[:, -1]
    return x


A_test = np.array([
    [2, 3, -1, 4, -2, 5, -3, 1],
    [-3, 2, 4, -1, 3, -2, 5, -1],
    [4, -1, 3, 2, -3, -1, -2, 5],
    [-1, 5, -2, 3, 4, -1, 2, -3],
    [3, -2, 3, -1, 4, 2, -3, 1],
    [-2, 4, -3, 3, 4, 5, -2, -4],
    [5, -1, -2, -3, 4, -5, -2, 3],
    [1, -3, 2, -2, 4, -1, 2, -8]], dtype=float)

b_test = np.array([10, -5, 8, 4, -7, 6, -3, 9], dtype=float)


solucion_test = gauss_jordan_pivot_determinante(A_test, b_test)


if solucion_test is not None:
    print("Solución del sistema:", solucion_test)

#Antonio Josue Rodriguez Falcon
#Ejercicio 2

import numpy as np

def gauss_jordan_pivot_determinante(A, b):

    n = len(A)

    Ab = np.hstack([A, b.reshape(-1, 1)]).astype(float)


    det_A = np.linalg.det(A)


    if np.isclose(det_A, 0):
        mensaje = f"Determinante de A: {det_A:.5f}. El sistema es indeterminado o no tiene solución única."
        print(mensaje)
        return None

    mensaje = f"Determinante de A: {det_A:.5f}. El sistema tiene solución única."
    print(mensaje)


    for i in range(n):

        max_row = np.argmax(abs(Ab[i:, i])) + i
        if i != max_row:
            Ab[[i, max_row]] = Ab[[max_row, i]]


        Ab[i] = Ab[i] / Ab[i, i]


        for j in range(n):
            if i != j:
                Ab[j] -= Ab[j, i] * Ab[i]


    x = Ab[:, -1]
    return x


A_test = np.array([
    [3, -2, 5, -1, 4, 2, -3, 1, 2],
    [-2, 4, -3, 1, 5, -1, 2, -4, 3],
    [5, -1, 2, -3, 4, -6, -2, 3, -1],
    [1, -3, 2, -2, 5, -6, 2, -3, 5],
    [2, 3, -1, -4, 2, 5, -3, 1, -2],
    [-3, 2, 4, 3, -3, -2, 5, -1, 9],
    [4, -1, 3, 2, -3, -1, -2, 5, -4],
    [-1, 5, -2, 3, 4, -1, 2, -3, 8],
    [3, -2, 5, -3, 4, 2, -3, 1, -5]], dtype=float)

b_test = np.array([-8, 7, -6, 5, 12, -9, 10, 3, -2], dtype=float)


solucion_test = gauss_jordan_pivot_determinante(A_test, b_test)


if solucion_test is not None:
    print("Solución del sistema:", solucion_test)

#Antonio Josue Rodriguez Falcon
#Ejercicio 3

import numpy as np

def gauss_jordan_pivot_determinante(A, b):

    n = len(A)

    Ab = np.hstack([A, b.reshape(-1, 1)]).astype(float)


    det_A = np.linalg.det(A)


    if np.isclose(det_A, 0):
        mensaje = f"Determinante de A: {det_A:.5f}. El sistema es indeterminado o no tiene solución única."
        print(mensaje)
        return None

    mensaje = f"Determinante de A: {det_A:.5f}. El sistema tiene solución única."
    print(mensaje)


    for i in range(n):

        max_row = np.argmax(abs(Ab[i:, i])) + i
        if i != max_row:
            Ab[[i, max_row]] = Ab[[max_row, i]]


        Ab[i] = Ab[i] / Ab[i, i]


        for j in range(n):
            if i != j:
                Ab[j] -= Ab[j, i] * Ab[i]


    x = Ab[:, -1]
    return x


A_test = np.array([
    [2, -3, 4, -1, 5, -1, 2, -1, 3, -2],
    [-3, 2, 5, -1, 4, 2, -3, 1, -2, 5],
    [4, -1, 3, 1, -3, -1, -2, 5, -4, 1],
    [-1, 5, -3, 4, 1, -1, 2, -3, 1, -5],
    [3, -4, 5, -1, 4, 1, 2, -4, 5, -3],
    [-2, 4, -3, 1, 5, -1, -2, 3, 4, -3],
    [5, -1, 2, -3, 1, -1, 2, -3, 1, -4],
    [1, -3, 4, -2, 5, -1, 2, -1, 4, -3],
    [2, 3, -1, 4, 2, 5, -3, 1, -2, 1],
    [-3, 2, 4, -1, 3, -2, 5, -1, 1, -4]], dtype=float)

b_test = np.array([11, -10, 8, -6, 7, -3, 9, -5, 6, -8], dtype=float)


solucion_test = gauss_jordan_pivot_determinante(A_test, b_test)


if solucion_test is not None:
    print("Solución del sistema:", solucion_test)